{"ast":null,"code":"// Generated by purs version 0.13.8\n\"use strict\";\n\nvar Control_Alt = require(\"../Control.Alt/index.js\");\n\nvar Control_Applicative = require(\"../Control.Applicative/index.js\");\n\nvar Control_Apply = require(\"../Control.Apply/index.js\");\n\nvar Control_Bind = require(\"../Control.Bind/index.js\");\n\nvar Control_Monad = require(\"../Control.Monad/index.js\");\n\nvar Control_Monad_Error_Class = require(\"../Control.Monad.Error.Class/index.js\");\n\nvar Data_Either = require(\"../Data.Either/index.js\");\n\nvar Data_Functor = require(\"../Data.Functor/index.js\");\n\nvar Data_Semigroup = require(\"../Data.Semigroup/index.js\");\n\nvar ExceptT = function ExceptT(x) {\n  return x;\n};\n\nvar runExceptT = function runExceptT(v) {\n  return v;\n};\n\nvar mapExceptT = function mapExceptT(f) {\n  return function (v) {\n    return f(v);\n  };\n};\n\nvar functorExceptT = function functorExceptT(dictFunctor) {\n  return new Data_Functor.Functor(function (f) {\n    return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));\n  });\n};\n\nvar monadExceptT = function monadExceptT(dictMonad) {\n  return new Control_Monad.Monad(function ($dollar__unused) {\n    return applicativeExceptT(dictMonad);\n  }, function ($dollar__unused) {\n    return bindExceptT(dictMonad);\n  });\n};\n\nvar bindExceptT = function bindExceptT(dictMonad) {\n  return new Control_Bind.Bind(function ($dollar__unused) {\n    return applyExceptT(dictMonad);\n  }, function (v) {\n    return function (k) {\n      return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function () {\n        var $84 = Control_Applicative.pure(dictMonad.Applicative0());\n        return function ($85) {\n          return $84(Data_Either.Left.create($85));\n        };\n      }())(function (a) {\n        var v1 = k(a);\n        return v1;\n      }));\n    };\n  });\n};\n\nvar applyExceptT = function applyExceptT(dictMonad) {\n  return new Control_Apply.Apply(function ($dollar__unused) {\n    return functorExceptT(dictMonad.Bind1().Apply0().Functor0());\n  }, Control_Monad.ap(monadExceptT(dictMonad)));\n};\n\nvar applicativeExceptT = function applicativeExceptT(dictMonad) {\n  return new Control_Applicative.Applicative(function ($dollar__unused) {\n    return applyExceptT(dictMonad);\n  }, function () {\n    var $86 = Control_Applicative.pure(dictMonad.Applicative0());\n    return function ($87) {\n      return ExceptT($86(Data_Either.Right.create($87)));\n    };\n  }());\n};\n\nvar monadThrowExceptT = function monadThrowExceptT(dictMonad) {\n  return new Control_Monad_Error_Class.MonadThrow(function ($dollar__unused) {\n    return monadExceptT(dictMonad);\n  }, function () {\n    var $88 = Control_Applicative.pure(dictMonad.Applicative0());\n    return function ($89) {\n      return ExceptT($88(Data_Either.Left.create($89)));\n    };\n  }());\n};\n\nvar altExceptT = function altExceptT(dictSemigroup) {\n  return function (dictMonad) {\n    return new Control_Alt.Alt(function ($dollar__unused) {\n      return functorExceptT(dictMonad.Bind1().Apply0().Functor0());\n    }, function (v) {\n      return function (v1) {\n        return Control_Bind.bind(dictMonad.Bind1())(v)(function (rm) {\n          if (rm instanceof Data_Either.Right) {\n            return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rm.value0));\n          }\n\n          ;\n\n          if (rm instanceof Data_Either.Left) {\n            return Control_Bind.bind(dictMonad.Bind1())(v1)(function (rn) {\n              if (rn instanceof Data_Either.Right) {\n                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rn.value0));\n              }\n\n              ;\n\n              if (rn instanceof Data_Either.Left) {\n                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(rm.value0)(rn.value0)));\n              }\n\n              ;\n              throw new Error(\"Failed pattern match at Control.Monad.Except.Trans (line 87, column 9 - line 89, column 49): \" + [rn.constructor.name]);\n            });\n          }\n\n          ;\n          throw new Error(\"Failed pattern match at Control.Monad.Except.Trans (line 83, column 5 - line 89, column 49): \" + [rm.constructor.name]);\n        });\n      };\n    });\n  };\n};\n\nmodule.exports = {\n  ExceptT: ExceptT,\n  runExceptT: runExceptT,\n  mapExceptT: mapExceptT,\n  functorExceptT: functorExceptT,\n  applyExceptT: applyExceptT,\n  applicativeExceptT: applicativeExceptT,\n  bindExceptT: bindExceptT,\n  monadExceptT: monadExceptT,\n  altExceptT: altExceptT,\n  monadThrowExceptT: monadThrowExceptT\n};","map":null,"metadata":{},"sourceType":"script"}