{"ast":null,"code":"// Generated by purs version 0.13.8\n\"use strict\";\n\nvar $foreign = require(\"./foreign.js\");\n\nvar Data_Monoid = require(\"../Data.Monoid/index.js\");\n\nvar Data_Monoid_Disj = require(\"../Data.Monoid.Disj/index.js\");\n\nvar Data_Newtype = require(\"../Data.Newtype/index.js\");\n\nvar Data_Semigroup = require(\"../Data.Semigroup/index.js\");\n\nvar Foldable = function Foldable(foldMap, foldl, foldr) {\n  this.foldMap = foldMap;\n  this.foldl = foldl;\n  this.foldr = foldr;\n};\n\nvar foldr = function foldr(dict) {\n  return dict.foldr;\n};\n\nvar foldl = function foldl(dict) {\n  return dict.foldl;\n};\n\nvar foldMapDefaultR = function foldMapDefaultR(dictFoldable) {\n  return function (dictMonoid) {\n    return function (f) {\n      return foldr(dictFoldable)(function (x) {\n        return function (acc) {\n          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);\n        };\n      })(Data_Monoid.mempty(dictMonoid));\n    };\n  };\n};\n\nvar foldableArray = new Foldable(function (dictMonoid) {\n  return foldMapDefaultR(foldableArray)(dictMonoid);\n}, $foreign.foldlArray, $foreign.foldrArray);\n\nvar foldMap = function foldMap(dict) {\n  return dict.foldMap;\n};\n\nvar any = function any(dictFoldable) {\n  return function (dictHeytingAlgebra) {\n    return Data_Newtype.alaF()()()()(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));\n  };\n};\n\nmodule.exports = {\n  Foldable: Foldable,\n  foldr: foldr,\n  foldl: foldl,\n  foldMap: foldMap,\n  foldMapDefaultR: foldMapDefaultR,\n  any: any,\n  foldableArray: foldableArray\n};","map":null,"metadata":{},"sourceType":"script"}