{"ast":null,"code":"// Generated by purs version 0.13.8\n\"use strict\";\n\nvar Control_Alt = require(\"../Control.Alt/index.js\");\n\nvar Control_Plus = require(\"../Control.Plus/index.js\");\n\nvar Data_Foldable = require(\"../Data.Foldable/index.js\");\n\nvar Data_Function = require(\"../Data.Function/index.js\");\n\nvar Data_Functor = require(\"../Data.Functor/index.js\");\n\nvar Data_Monoid = require(\"../Data.Monoid/index.js\");\n\nvar Data_NonEmpty = require(\"../Data.NonEmpty/index.js\");\n\nvar Data_Semigroup = require(\"../Data.Semigroup/index.js\");\n\nvar Nil = function () {\n  function Nil() {}\n\n  ;\n  Nil.value = new Nil();\n  return Nil;\n}();\n\nvar Cons = function () {\n  function Cons(value0, value1) {\n    this.value0 = value0;\n    this.value1 = value1;\n  }\n\n  ;\n\n  Cons.create = function (value0) {\n    return function (value1) {\n      return new Cons(value0, value1);\n    };\n  };\n\n  return Cons;\n}();\n\nvar NonEmptyList = function (x) {\n  return x;\n};\n\nvar toList = function (v) {\n  return new Cons(v.value0, v.value1);\n};\n\nvar listMap = function (f) {\n  var chunkedRevMap = function ($copy_chunksAcc) {\n    return function ($copy_v) {\n      var $tco_var_chunksAcc = $copy_chunksAcc;\n      var $tco_done = false;\n      var $tco_result;\n\n      function $tco_loop(chunksAcc, v) {\n        if (v instanceof Cons && v.value1 instanceof Cons && v.value1.value1 instanceof Cons) {\n          $tco_var_chunksAcc = new Cons(v, chunksAcc);\n          $copy_v = v.value1.value1.value1;\n          return;\n        }\n\n        ;\n\n        var unrolledMap = function (v1) {\n          if (v1 instanceof Cons && v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil) {\n            return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));\n          }\n\n          ;\n\n          if (v1 instanceof Cons && v1.value1 instanceof Nil) {\n            return new Cons(f(v1.value0), Nil.value);\n          }\n\n          ;\n          return Nil.value;\n        };\n\n        var reverseUnrolledMap = function ($copy_v1) {\n          return function ($copy_acc) {\n            var $tco_var_v1 = $copy_v1;\n            var $tco_done = false;\n            var $tco_result;\n\n            function $tco_loop(v1, acc) {\n              if (v1 instanceof Cons && v1.value0 instanceof Cons && v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons) {\n                $tco_var_v1 = v1.value1;\n                $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));\n                return;\n              }\n\n              ;\n              $tco_done = true;\n              return acc;\n            }\n\n            ;\n\n            while (!$tco_done) {\n              $tco_result = $tco_loop($tco_var_v1, $copy_acc);\n            }\n\n            ;\n            return $tco_result;\n          };\n        };\n\n        $tco_done = true;\n        return reverseUnrolledMap(chunksAcc)(unrolledMap(v));\n      }\n\n      ;\n\n      while (!$tco_done) {\n        $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);\n      }\n\n      ;\n      return $tco_result;\n    };\n  };\n\n  return chunkedRevMap(Nil.value);\n};\n\nvar functorList = new Data_Functor.Functor(listMap);\nvar foldableList = new Data_Foldable.Foldable(function (dictMonoid) {\n  return function (f) {\n    return Data_Foldable.foldl(foldableList)(function (acc) {\n      var $181 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);\n      return function ($182) {\n        return $181(f($182));\n      };\n    })(Data_Monoid.mempty(dictMonoid));\n  };\n}, function (f) {\n  var go = function ($copy_b) {\n    return function ($copy_v) {\n      var $tco_var_b = $copy_b;\n      var $tco_done = false;\n      var $tco_result;\n\n      function $tco_loop(b, v) {\n        if (v instanceof Nil) {\n          $tco_done = true;\n          return b;\n        }\n\n        ;\n\n        if (v instanceof Cons) {\n          $tco_var_b = f(b)(v.value0);\n          $copy_v = v.value1;\n          return;\n        }\n\n        ;\n        throw new Error(\"Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): \" + [v.constructor.name]);\n      }\n\n      ;\n\n      while (!$tco_done) {\n        $tco_result = $tco_loop($tco_var_b, $copy_v);\n      }\n\n      ;\n      return $tco_result;\n    };\n  };\n\n  return go;\n}, function (f) {\n  return function (b) {\n    var rev = function () {\n      var go = function ($copy_acc) {\n        return function ($copy_v) {\n          var $tco_var_acc = $copy_acc;\n          var $tco_done = false;\n          var $tco_result;\n\n          function $tco_loop(acc, v) {\n            if (v instanceof Nil) {\n              $tco_done = true;\n              return acc;\n            }\n\n            ;\n\n            if (v instanceof Cons) {\n              $tco_var_acc = new Cons(v.value0, acc);\n              $copy_v = v.value1;\n              return;\n            }\n\n            ;\n            throw new Error(\"Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): \" + [acc.constructor.name, v.constructor.name]);\n          }\n\n          ;\n\n          while (!$tco_done) {\n            $tco_result = $tco_loop($tco_var_acc, $copy_v);\n          }\n\n          ;\n          return $tco_result;\n        };\n      };\n\n      return go(Nil.value);\n    }();\n\n    var $183 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);\n    return function ($184) {\n      return $183(rev($184));\n    };\n  };\n});\nvar semigroupList = new Data_Semigroup.Semigroup(function (xs) {\n  return function (ys) {\n    return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);\n  };\n});\nvar semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {\n  return function (as$prime) {\n    return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));\n  };\n});\nvar altList = new Control_Alt.Alt(function ($dollar__unused) {\n  return functorList;\n}, Data_Semigroup.append(semigroupList));\nvar plusList = new Control_Plus.Plus(function ($dollar__unused) {\n  return altList;\n}, Nil.value);\nmodule.exports = {\n  Nil: Nil,\n  Cons: Cons,\n  NonEmptyList: NonEmptyList,\n  toList: toList,\n  semigroupList: semigroupList,\n  functorList: functorList,\n  foldableList: foldableList,\n  altList: altList,\n  plusList: plusList,\n  semigroupNonEmptyList: semigroupNonEmptyList\n};","map":null,"metadata":{},"sourceType":"script"}