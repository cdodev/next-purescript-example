{"ast":null,"code":"/* global XMLHttpRequest */\n\n/* global process */\n\"use strict\";\n\nexports._ajax = function () {\n  var platformSpecific = {};\n\n  if (typeof module !== \"undefined\" && module.require && !(typeof process !== \"undefined\" && process.versions[\"electron\"])) {\n    // We are on node.js\n    platformSpecific.newXHR = function () {\n      var XHR = module.require(\"xhr2\");\n\n      return new XHR();\n    };\n\n    platformSpecific.fixupUrl = function (url, xhr) {\n      if (xhr.nodejsBaseUrl === null) {\n        var urllib = module.require(\"url\");\n\n        var u = urllib.parse(url);\n        u.protocol = u.protocol || \"http:\";\n        u.hostname = u.hostname || \"localhost\";\n        return urllib.format(u);\n      } else {\n        return url || \"/\";\n      }\n    };\n\n    platformSpecific.getResponse = function (xhr) {\n      return xhr.response;\n    };\n  } else {\n    // We are in the browser\n    platformSpecific.newXHR = function () {\n      return new XMLHttpRequest();\n    };\n\n    platformSpecific.fixupUrl = function (url) {\n      return url || \"/\";\n    };\n\n    platformSpecific.getResponse = function (xhr) {\n      return xhr.response;\n    };\n  }\n\n  return function (timeoutErrorMessageIdent, requestFailedMessageIdent, mkHeader, options) {\n    return function (errback, callback) {\n      var xhr = platformSpecific.newXHR();\n      var fixedUrl = platformSpecific.fixupUrl(options.url, xhr);\n      xhr.open(options.method || \"GET\", fixedUrl, true, options.username, options.password);\n\n      if (options.headers) {\n        try {\n          // eslint-disable-next-line no-eq-null,eqeqeq\n          for (var i = 0, header; (header = options.headers[i]) != null; i++) {\n            xhr.setRequestHeader(header.field, header.value);\n          }\n        } catch (e) {\n          errback(e);\n        }\n      }\n\n      var onerror = function onerror(msgIdent) {\n        return function () {\n          errback(new Error(msgIdent));\n        };\n      };\n\n      xhr.onerror = onerror(requestFailedMessageIdent);\n      xhr.ontimeout = onerror(timeoutErrorMessageIdent);\n\n      xhr.onload = function () {\n        callback({\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: xhr.getAllResponseHeaders().split(\"\\r\\n\").filter(function (header) {\n            return header.length > 0;\n          }).map(function (header) {\n            var i = header.indexOf(\":\");\n            return mkHeader(header.substring(0, i))(header.substring(i + 2));\n          }),\n          body: platformSpecific.getResponse(xhr)\n        });\n      };\n\n      xhr.responseType = options.responseType;\n      xhr.withCredentials = options.withCredentials;\n      xhr.timeout = options.timeout;\n      xhr.send(options.content);\n      return function (error, cancelErrback, cancelCallback) {\n        try {\n          xhr.abort();\n        } catch (e) {\n          return cancelErrback(e);\n        }\n\n        return cancelCallback();\n      };\n    };\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}