{"ast":null,"code":"\"use strict\"; // jshint maxparams: 3\n\nexports.traverseArrayImpl = function () {\n  function array1(a) {\n    return [a];\n  }\n\n  function array2(a) {\n    return function (b) {\n      return [a, b];\n    };\n  }\n\n  function array3(a) {\n    return function (b) {\n      return function (c) {\n        return [a, b, c];\n      };\n    };\n  }\n\n  function concat2(xs) {\n    return function (ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  return function (apply) {\n    return function (map) {\n      return function (pure) {\n        return function (f) {\n          return function (array) {\n            function go(bot, top) {\n              switch (top - bot) {\n                case 0:\n                  return pure([]);\n\n                case 1:\n                  return map(array1)(f(array[bot]));\n\n                case 2:\n                  return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));\n\n                case 3:\n                  return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));\n\n                default:\n                  // This slightly tricky pivot selection aims to produce two\n                  // even-length partitions where possible.\n                  var pivot = bot + Math.floor((top - bot) / 4) * 2;\n                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));\n              }\n            }\n\n            return go(0, array.length);\n          };\n        };\n      };\n    };\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}