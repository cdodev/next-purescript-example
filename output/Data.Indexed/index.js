// Generated by purs version 0.14.3
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Applicative_Indexed = require("../Control.Applicative.Indexed/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Apply_Indexed = require("../Control.Apply.Indexed/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Bind_Indexed = require("../Control.Bind.Indexed/index.js");
var Control_Monad_Indexed = require("../Control.Monad.Indexed/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Indexed = require("../Data.Functor.Indexed/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Show = require("../Data.Show/index.js");
var Indexed = function (x) {
    return x;
};
var showIndexed = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Indexed " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var ordIndexed = function (dictOrd) {
    return dictOrd;
};
var ord1Indexed = function (dictOrd1) {
    return dictOrd1;
};
var newtypeIndexed = new Data_Newtype.Newtype(function () {
    return undefined;
});
var monadIndexed = function (dictMonad) {
    return dictMonad;
};
var ixFunctorIndexed = function (dictFunctor) {
    return new Data_Functor_Indexed.IxFunctor(function (f) {
        return function (v) {
            return Data_Functor.map(dictFunctor)(f)(v);
        };
    });
};
var ixApplyIndexed = function (dictApply) {
    return new Control_Apply_Indexed.IxApply(function () {
        return ixFunctorIndexed(dictApply.Functor0());
    }, function (v) {
        return function (v1) {
            return Control_Apply.apply(dictApply)(v)(v1);
        };
    });
};
var ixBindIndexed = function (dictBind) {
    return new Control_Bind_Indexed.IxBind(function () {
        return ixApplyIndexed(dictBind.Apply0());
    }, function (v) {
        return function (f) {
            return Indexed(Control_Bind.bind(dictBind)(v)(function (a) {
                var v1 = f(a);
                return v1;
            }));
        };
    });
};
var ixApplicativeIndexed = function (dictApplicative) {
    return new Control_Applicative_Indexed.IxApplicative(function () {
        return ixApplyIndexed(dictApplicative.Apply0());
    }, (function () {
        var $30 = Control_Applicative.pure(dictApplicative);
        return function ($31) {
            return Indexed($30($31));
        };
    })());
};
var ixMonadIndexed = function (dictMonad) {
    return new Control_Monad_Indexed.IxMonad(function () {
        return ixApplicativeIndexed(dictMonad.Applicative0());
    }, function () {
        return ixBindIndexed(dictMonad.Bind1());
    });
};
var functorIndexed = function (dictFunctor) {
    return dictFunctor;
};
var eqIndexed = function (dictEq) {
    return dictEq;
};
var eq1Indexed = function (dictEq1) {
    return dictEq1;
};
var bindIndexed = function (dictBind) {
    return dictBind;
};
var applyIndexed = function (dictApply) {
    return dictApply;
};
var applicativeIndexed = function (dictApplicative) {
    return dictApplicative;
};
module.exports = {
    Indexed: Indexed,
    newtypeIndexed: newtypeIndexed,
    eqIndexed: eqIndexed,
    eq1Indexed: eq1Indexed,
    ordIndexed: ordIndexed,
    ord1Indexed: ord1Indexed,
    showIndexed: showIndexed,
    functorIndexed: functorIndexed,
    applyIndexed: applyIndexed,
    applicativeIndexed: applicativeIndexed,
    bindIndexed: bindIndexed,
    monadIndexed: monadIndexed,
    ixFunctorIndexed: ixFunctorIndexed,
    ixApplyIndexed: ixApplyIndexed,
    ixApplicativeIndexed: ixApplicativeIndexed,
    ixBindIndexed: ixBindIndexed,
    ixMonadIndexed: ixMonadIndexed
};
